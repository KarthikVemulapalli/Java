Java: High level programming language

	Java History: Java Developed in 1991 (Currently owned by Oracle Corporation)
		1. Syntax was Easier than C & C++
		2. Minimizing the Code using Inheritance (OOPS Concepts)
		3. Best Memory Management (Runtime Memory)
		4. Robust (Multiple Platforms)
		5. No concept of 'Pointers' like C
   			Ex: In C Programming. int a = 10; where a* gives the Address of variable (Memory - 129.189.1009).
		6. Platform Independent

	Why Java is still preferred in 2021:
		1. It was implemented and used in large number of projects
		2. Robust(Strong) Memory Management Effectiveness is High. Memory Management Will help to take care of garbage collection, Type Checking mechanism, Exception handling mechanism
		3. Developing Applications is much easier
		4. MultiThreaded is useful for Security (Will help to divide the work among multiple threads)
		5. Type Checking Mechanism
		6. Exception handling
		7. Object Oriented programming approach
		8. Secure - Execution inside Virtual Machine, No Pointers
		9. Architecture neutral and portable - Will help a java project to run in any environment irrespective of its platform.

	Configuration JDK with Eclipse (IDE):
		* IDE's are platforms where you can add plugins to write desired Programming languages (Eclipse/IntelliJ are IDE's).
		Installation Steps:
			1. Download IDE application and Install in the system.
			2. Download respective Programming Language SDK files. And Install in the system.
			3. Open IDE and Install the Programming Language Plugin to IDE.
			4. Configure Plugin in IDE with the Programming Language SDK.

	Java Editions in Market:
		1. Java Standard Edition
		2. Java Enterprise Edition

	Java Architecture (JDK - Java Development Kit):
		1. Compiler				
		2. JRE (Java Runtime Environment)
			a) Interpreter
			b) Packages, RunTime Libraries, JavaAPI
			c) Java Virtual Machine - JVM uses JIT (Just In Time) compiler to do its work efficiently
			
		Compiler (javac.exe):
			* Checks the Code Syntax during Compile time (while writing the code).
			* Converts JavaProgram (.java file) to byte code (.class file).
			* These '.class' files are in encrypted format and only JVM can read these files and execute based on OS.	
		Interpreter (java.exe):
			* Converts High Level Language to Low Level Language during Runtime (Execution)
				1. Low Level - 0 & 1 (Machine Readable)
				2. High Level - Human Readable	
		Java Virtual Machine
			* With Help of JVM, Libraries and packages the code execution happens.
			** JVM is OS platform dependent. But Java is platform independent.
			* JVM is the actual runtime in which a Java application executes.
			* Interpreter converts byte code to machine code.
		
		Note:
			** Development tools like javac and java are available in the bin folder of the JDK installation directory.
			** From JDK 11 onwards there is no Java Runtime Environment (JRE).
			* Java is a platform independent, once compiled it can be run on any OS by using OS relevant JVM.

    Java vs C (Why Java is Independent Language)
        Java Compiler converts Source Code to Byte Code.
        C Compiler converts Source Code to System Code (Based on OS).
        * So because of this byte code intermediate step, the OS reads the byte code and executes the program, thus Java is independent language.


	Java Architecture Execution Flow:
		Compiler (javac.exe) converts 'Source file(.java)' -> 'Byte Code (.class)'
		OS JVM will perform {Class Loader -> Byte Code Verifier -> Interpreter -> JIT Compiler -> Runtime} -> Operating System -> Hardware
	
		* javac.exe - Platform independent code generated by compiler
		* Class Loader - Loads all the class files needed for execution
		* Byte Code Verifier - Checks code fragments for illegal code
		* Interpreter - Converts byte code instruction to machine code
		* JIT Compiler - Compiles reusable byte code to machine code
		* Runtime - Assists in overall execution of the program

	Building blocks of Java application:
		* Class
		* Variables
		* Methods
		* Blocks

	In-Built Keywords:
		* Primitive datatypes - It holds the value of the data item.
			There are 8 primitive datatypes: boolean, char, byte, short, int, long, float, double
		* Non-Primitive datatypes - It holds the memory address where the data item (object) is stored.
			It is also known as Reference datatypes: Class, String, enum...

	Operations:
		1. Arithmetic (+, -, *, /, %)
		2. Bitwise (Ampersand '&', Pipe '|', Hat '^', Exclamation '!', Tilde '~')
		    &,|,^ Can be used on boolean and Integral data types
		    ~ can only be applied on Integral
		    ! can only be applied on Boolean
		3. Relational (>, <, >=, <=)
		4. Ternary (TestExpression?Value1:Value2)
		    If TestExpression is true then Value1 will be assigned. If false then Value2 gets assigned.
		    Example:
		        String val = (0>1)?"Win":"Loss", the output of val is Loss.
		5. Sort Circuit Logical (&&, ||)
		    Can be used only on boolean
		6. Assignment (=)

	Converting Numerical value to Binary Code:
		1. Substraction Method
		2. Successive Division Method

	Datatypes Casting: Java is a strongly-typed language, where type-checking is strictly enforced at runtime.
		1. Widening conversion / Implicit type casting: Converting a variable of smaller datatype to the larger datatype, without data loss is known as widening conversion.
		2. Narrowing conversion / Explicit type casting: Converting a variable of larger datatype to the smaller datatype, with some data loss is known as narrowing conversion.

        * Casting can be done on both Primitive and Reference data types.

		Example:
		    Implicit Type Casting:
		        - Assigning byte value to int.
		        - Assigning Child object to Parent object.
		    Explicit Type Casting:
                - Assigning int value to byte.
            	- Assigning  Parent object to Child object.

		Order: For type casting,
			boolean (1 bit)
			byte(1 byte) -> short(2 byte) -> char(2byte) -> int(4 byte) -> long(8 byte) -> float(4byte) -> double(8 byte)

	Coding Best Practices:
		* The name of the class should start with an uppercase letter using CamelCase notation
			Example: EmployeeRefer
		* The name of methods should start with a lowercase letter and then using CamelCase notation
			Example: getName()

	Packages
		* All data types, access modifiers, static, system..... are from 'Java.lang' package. But if we observe we won't mention 'import java.lang.*' because this package is by default GlobalPackage present within java compiler as it is most commonly used by everyone.
		* All collection classes/interfaces present in 'import java.util.*'
		* Import methods/variable from other packages we use 'import PackageName.ClassName'
		* To access all static variables/methods directly without using ClassName we can use 'import static PackageName.ClassName'.


Execution Begin:
	For every Standalone Java Program the execution starts from the line 'public static void main(String[] arguments)',
		* The program execution starts from the main method in Java.
		* 'public' is access modifier has been used for the main method as it is invoked using the Java tool by JVM. If any other access modifier is given the JVM cannot identify the main method.
		* The static method has been used for the main method as JVM can directly access the method using ClassName. 
		* If static is not mentioned JVM cannot invoke the main method using the object of the class.
		* Void is return type. As execution stops after main method. No point in keeping return type.
		* The parameter of the main method is a String array. Any number of inputs can be passed to the Java program during runtime using command-line arguments. The String Array is used to store these inputs and can be used in our code.
		    Parameters can be passed via Program arguments using Run configuration.
	System.out.println()
		* 'System' is an In-Built class
		* 'out' is static object of PrintStream class which is created inside System class.
		* println() is a method of PrintStream class.

Access Modifiers:
	Public:
   		* Public nonstatic variables/methods can be accessed anywhere in the project using ClassObject (Outside Class & static methods present Inside same Class) & directly accessed inside nonstatic methods (Inside same Class).
		* Public static variables/methods can be accessed anywhere in the project using ClassName (Outside Class) & directly accessed (Inside same Class).

	Private: Can only be accessed inside the same class.
		* Private variables/methods cannot be accessed outside the class (even with Classname or Class Object).
		* Private variables/methods can be accessed directly inside the class in any non-static method.
		* Private variables/method can only be accessed inside Static method of same class using ClassObject.
		* Private variables/methods cannot be accessed outside the class or in ChildClass.
		* Private methods cannot be overridden, even though we can create same method in ChildClass it doesn't mean the method is overridden.

	Protected:
		* Variables/Methods can be accessed inside any class of same package.
		* Variables/Methods can be accessed only in ChildClass of other package.

	Default (no name mentioned): Package Private
		* Variables/Methods can be accessed only inside the same package of any class.

Object Oriented Programming Structure:
	1. Polymorphism
	2. Abstraction
	3. Encapsulation
	4. Inheritance
	
	* Object - RealWorld entities that has their own properties and behaviour. Ex: Dog
	* Class - Blueprint from which an objects properties and behaviours are decided.
		Ex: Properties/Variables (breed, size, age, weight, colour), Behaviours/Methods (eat(), sleep(), run(), bark()).
	* An object is also called as container which contains both Properties & Behaviours.

	Object-Oriented vs Procedural Programming:
		- BottomUp approach     | TopDown Approach
		- Have access modifiers | Do not have access modifiers
		- More Secure           | Less Secure
		- Code Re-Usability     | Need to modify entire code for each change

	Variables: Local Variable, Static Variable, Instance Variable, Reference Variable
		1. Local Variable - Variables that are declared and used inside the same method only.
			* Only Local variables cannot have any AccessModifiers, there access will be Method-Private.
		2. Static Variable - Static variables are declared directly inside the class and outside the method.
			* To access anywhere it is done by only using ClassName (accessing by ClassObject not preferred).
		3. Instance Variable - Instance (NonStatic) variables are declared inside the class and outside the method.
			* Inside same class
				nonstatic method - using 'this' if necessary
				static method - using ClassObject
			* These are accessed outside class using ClassObject only.
		4. Reference Variable - Variable which stores the address of the object (class)
			* Classes, Interfaces, Arrays, Enumerations & Annotations are reference types in Java. Reference variables hold the address of objects/values of reference types in Java.

		** Constant Variable: It is the one whose value is fixed and only one copy of it exists in the program. Should use static & final keywords.
			syntax: public static final String Variable = ""; 
			* In an interface all variables are constant which are implicitly public, static, and final.
		** Final Variable: It is the one whose value is fixed in the program. Should use final keyword.
			syntax: public final String Variable = "";

	this:
		* it is used to differentiate between Instance variable to the Local variable if they both have same name.
		* It is used on a nonstatic variable and only inside a nonstatic method.
		* The keyword can only be used in nonstatic methods, cannot be used in static methods.
	
	final:
		* Stops value change for Variables.
		* Stops a specific method of OverRidding in ChildClass.
		* Stops Inheriting that class by other classes.
		* Abstract/Interface cannot be used final (These methods/classes need to be implemented so cannot be final)
		* 'final' keyword can be placed anywhere
			- Method: should be before return type. '(final) public (final) static (final) void Method(){}'
			- Variable: should be before datatype. '(final) public (final) static (final) int A=0'
			- Class: should be before class keyword.
		* In final class, all the methods are implicitly final. Because we can't inherit the class hence we can't override the methods.

	super:
		* 'super()' constructor call - It is used only to call ParentClass constructor in ChildClass constructor.
		* super.method() - It is used to call ParentClass method in ChildClass when method overridden is done.
		* Interface.super.method() - It is used to call Interface method in ChildClass when method overridden is done.
		* super.variable - It is used to call ParentClass variable in ChildClass when same variable name present in ChildClass.

	Static: blocks, methods, variables
   		* Static block code will execute first before the main() method.
   		* Static block only executes once when class is loaded (in entire execution).
		* Static variables/methods Access
			* Inside same class: Accessed directly inside Static/NonStatic method.
			* Outside class: Accessed using ClassName inside a Static/NonStatic method.
		* Nested Class
			* You can only make nested classes either static or nonstatic, the top level class cannot be made static.
		* static methods/variables belongs to a class but not to the objects of the class.
		* We cannot override static methods, even though we can create same method in ChildClass it doesn't mean the method is overridden.
		* We are not allowed to create static class/variables/method inside method.

	NonStatic: blocks, methods, variables
	    * NonStatic block gets executed before constructor of the class. Executes everytime object of class created.
		* NonStatic variables/methods can be accessed inside static method of same class using ClassObject.
		* NonStatic variables/methods can be accessed directly inside a NonStatic method of same class.
		* NonStatic variables/methods can be accessed using ClassObject inside a Static/NonStatic method of different class.
	
	Object Creation: 
		'Class ReferenceVariable = new Class();'
			* The function of the 'new' keyword is to allocate memory for object. And assign default values to the member variables.
			* The 'ReferenceVariable' points to the address of Class object created in the memory. Just after memory allocation for the object, Class() constructor is called.
	
			* A reference variable stores the logical address of an object, but the explicit use of an address is not supported in Java.
			* Unlike in C, pointer manipulation is not possible in Java.
			* The default value remains null for the reference variable till we assign an object to it.

		OtherClass/Interface/AbstractClass ReferenceVariable = new ChildClass();
			* The above line syntax can only be written when
			    ChildClass Implements Interface
			    ChildClass Extends AbstractClass
			    ChildClass Extends OtherClass
			* ReferenceVariable cannot access methods specific to ChildClass. By stating above, the ReferenceVariable can access only OtherClass/Interface/AbstractClass methods & Implemented methods in ChildClass.
			* It is possible to create a static reference variable.
			    static Class ReferenceVariable = new Class();
			        Example: System.out.print(), where out is static object of PrintStream class created inside System class.
	
		ClassA Obj = new ClassB();
		    * Implicit Object Type Casting
			* It can be written only when ClassB extends ClassA because 'A SuperClass reference variable can hold reference of SubClass object without typecasting'
			
		ChildClass ChildClassObj = (ChildClass) new ParentClass();
		    * Explicit Object Type Casting
			* ChildClass reference variable cannot hold reference of ParentClass object without explicit typecasting.
			* Above line is similar to ChildClass ChildClassObj = new ChildClass();
	
	Class:
		* Only two Access Modifiers 'public' & 'default' can be used for creating Class/Interface/AbstractClass. Private and Protected cannot be used.
		* During Class/Interface/AbstractClass creation extends keyword should be written ahead of Implements.
		* You cannot call 'void' return type methods in 'System.out.print()'. Because the method System.out.print() expects an Object as a parameter to print, whereas the void method doesn't return anything.
		* varags (variable Arguments) parameter: We can pass 'n' number of parameters in a method by simply using the syntax '...' (three dots), '...' should be the last parameter in method signature.
			Ex: public void SampleMethod(String s, int... a){  }, here 'a' is considered as an Array. We can access all values passed to this method by array functions.
				But we can't pass Array for same scenario 'public void SampleMethod(int[] a){  }' to access the method.

		Abstract Class:
			* 'abstract' keyword needs to be mentioned for an abstract method (Non-Implemented method)
			* Abstract method should be compulsory present inside an Abstract Class/Interface (before Java SE8).
            * An empty Abstract class can be created with no abstract methods (from Java SE8).
			* An empty Abstract class can be created with neither abstract nor implemented methods.
			* Abstract class can have constructors
			* Abstract class cannot be instantiated (cannot create object of an abstract class)
			* All type of AccessModifiers of variables/methods can be created inside an AbstractClass.
			* Abstract class can have Static methods
			* An Abstract method cannot be static
			* The ChildClass should override all the abstract methods in ParentAbstractClass unless the ChildClass is Abstract
			* Abstract class should only be Extended (extends), not implemented.

		Interface:
			* Marker/Tagging interface - Empty Interface
			* Interface can have only public/default Access Modifiers (before Java SE8).
			* Interface methods should not be implemented unless it is a default method (from Java SE8).
			* Functional Interface - Only one abstract method & n number of default methods (from Java SE8).
			    We can mark annotation @FunctionalInterface for an interface. Not mandatory to provide annotation.
            * Interface with no abstract methods can only extends an FunctionalInterface. Because there is already an Abstract method present in inherited functional interface.
    		* In an interface all variables are implicitly public, static, and final.
			* Interfaces cannot have constructors
			* Interface cannot be instantiated (cannot create object of an Interface)
			* In an interface methods with no implementation are implicitly public and abstract.
			* From Java SE8, Interface can have static & default methods.
			* From Java SE9, Interface can have private methods with either static/non-static.
			* Class, Abstract class, Nested Class, Enum, Dynamic proxy can implements interfaces.
			* Only interface can extends an interface.
			* Default methods in ParentInterface can be called in ChildClass using 'InterfaceName.super.DefaultMethod()'
			
			** InterfaceObj cannot access methods specific to ChildClass. By stating below, the InterfaceObj can access only Interface methods & Interface Implemented methods in ChildClass
				Interface InterfaceObj = new ChildClass();
			** WebDriver driver = new ChromeDriver(); where ChromeDriver is class, WebDriver is interface
				The above line is only allowed when ChromeDriver implements WebDriver 
			* Type casting needs to be done if not implementing (This is not preferrable).
				Interface obj = (Interface) new Class();

			* The class which implements an Interface, should implement all abstract methods.
			* Interface cannot have Implemented methods, only default methods are accepted.
			** Using below statement the ParentClass method is called in ChildClass, if method Overridden is done
				InterfaceOne.super.DefaultMethod();
		
		InnerClass:
			* Expect static inner class we cannot create static variables/methods in any other inner class.
			* To access static variables/methods inside InnerClass i.e. ClassName.StaticVariableOrMethod
			* To access nonstatic variables/methods (even though private) inside InnerClass i.e. ClassName.this.VariableOrMethod

			1. LocalInnerClass
				* NonStaticClass created inside method/constructor/block. (We are not allowed to create static class/variables/method inside method).
				* ObjectCreation should be done inside the method where InnerClass is present.
			2. NonStaticInnerClass
				* NonStaticClass created outside method and inside class
				* Cannot create static methods inside NonStaticInnerClass
				* ObjectCreation for NonStaticInnerClass/StaticInnerClass
        				NonStaticInnerClass - for creating NonStaticInnerClass object, we require OuterClassObj
						1. Create object of OuterClass,
							OuterClass OuterClassObj = new OuterClass();
						2. Create object of NonStaticInnerClass,
							OuterClass.NonStaticInnerClass NSICObj = OuterClassObj.new NonStaticInnerClass();
			3. StaticInnerClass
				* StaticClass created outside method and inside class
				* We can create both static and nonstatic methods inside StaticInnerClass
				* ObjectCreation for StaticInnerClass -
					1. Create object of StaticInnerClass,
						OuterClass.StaticInnerClass SICObj = new OuterClass.StaticInnerClass();
			4. AnonymousInnerClass
				* Similar to localClass having no name defined inside a method. And can be created to use at one particular instance.
				* We cannot define constructors for AnonymousInnerClass.
				* Use of AnonymousClass is, if you want to override a particular method only once. We need to create subclass and overwrite the desired method, this cause usage of more memory. So Anonymous class is used to make memory efficient.
				* AnonymousClass can be created for Class & Interface.
					Class for overidding methods
					Interface for Implementing methods.
				** Rare Scenario: We can create object of Interface using AnonymousClass
				    Interface obj = new Interface(){
				        Add Unimplemented methods
				    }
				* AnonymousClass don't have name, the name is decided by compiler.
				* AnonymousClass cannot be public, private, protected, or static.
				* Anonymous objects, object creation without reference variable 'new ClassA()'.

		Annotation
			* Marker annotation - Empty annotation
			* Single & Multi value annotation - Single & multiple methods present in annotation
			* '@interface' should be used while creating Annotation
	
	Constructors:
		1. Non-Parameterized
		2. Parameterized

		* We need to manually implement NonParametrized Constructor if Parametrized Constructor is present.
		* If not defined, compiler will automatically create Non-Parameterized constructor for every class.
		* If coder has defined Parameterized constructor, compiler will not create Non-Parameterized constructor.
		* The name of constructor should be same as classname.
		* They do not have any return type.
		* They can have any access modifiers.
		* They cannot be static or final because the constructors in Java can not be static because if the constructors are marked as static, they can not be called from the child class.
		* A constructor is called when an object of a class is created, so no use of making the static constructor. Because static is specific to the class.
		* Inheritance, the ParentClass constructor by default called inside a ChildClass constructor as 'super()'. 
		* In case parent class has parameterized constructor we need to call using 'super(parameter)' and it should be the first line in ChildClass constructor.

	Encapsulation:
		* It is the process by which data (variables) and the code that acts upon them (getter & setter methods) are integrated as single unit.
		* These private variables are accessed by other classes only through setter & getter methods.
		* This is used to protect confidential data being accessed by users easily.
	
	Polymorphism:
		Static Polymorphism
			* Method overloading (compile-time)
			* Method Overloading is achieved with same Method names
			* Method Overloading is achieved with different parameters
			* Order of parameters type written is considered.
			* Method Overloading is not achieved by changing return-type of method.
			* It uses compile-time binding
			* Method invoked is based on the reference type
			* It is only applicable for Methods but not variables.
		Dynamic Polymorphism
			* Method overriding (run-time)
			* It uses late binding or runtime binding
			* Method invoked is based on the object type	
			* It is only applicable for Methods but not variables.
		
	Abstraction:
		* Data abstraction is the process of hiding certain details and showing only essential information to the user. 
		* Abstraction can be achieved by either abstract classes or interfaces
		
	Inheritance: 
		* It is a mechanism in which ChildObject acquires all the properties and behaviors of a ParentObject.
		* Can be achieved by using 'extends' keyword.
		* Child Class inherit the Parent Class properties.
		* Re-Usability and Is-A relationship
		* To call ParentClass method in ChildClass when overridden is done use the below,
			'super.method()'
		* ParentClass constructor called inside a ChildClass constructor as 'super()' by default.
		* In case ParentClass has parameterized constructor we need to call using 'super(parameter)' and it should be the first line in ChildClass constructor.
		** Rare Scenario: We can create object of Interface using AnonymousClass

		* If same Variables of ParentClass are not present in SubClass, ParentClass variables can be used in ChildClass without super keyword
		* 'super' keyword is used for a variable/method in a subclass. To differentiate ParentClass variable/method with subclass variable/method.
		* Private Variables/Methods of ParentClass cannot be accessed in ChildClass.
		* You cannot override methods of ParentClass if they are defined with 'final' keyword.

		** The below line can be written only when ClassB extends ClassA because 'A SuperClass reference variable can hold reference of SubClass object without typecasting'
			ClassA Obj = new ClassB();
		** In below line, ChildClass reference variable cannot hold reference of ParentClass object without typecasting'.
			ChildClass ChildClassObj = (ChildClass) new ParentClass();
			Above line is similar to ChildClass ChildClassObj = new ChildClass();
		
		Multiple-Inheritance:
			* Multiple Inheritance is not applicable in Java (using Extends).
			* A class can only extends a single class.
			* To overcome this we can use implementation (through this we can achieve multiple Inheritance),
				- A class can implements multiple Interfaces
				- A class can extends Class/AbstractClass & implements multiple Interfaces.

Exception Handling:
	* If exception is not handled using 'try-catch', it stops the execution.
	* Error vs Exception
		- All errors are unchecked, exceptions are Checked & unchecked
		- Errors happen at run-time, exceptions happens at compile-time & run-time
		- Impossible to recover from error, Possible to recover from exceptions.
	* 'Object' is ParentClass of 'Throwable'. Exceptions & Errors are ChildClasses of 'Throwable'
	* Exceptions
		Ex: Checked (CompileTime-Issue in coding structure) & Unchecked exceptions (NullPointerException exception)
	* Errors
		Ex: Assertion Error, VirtualMachine Error
	* Java Exceptions are of two types
		1. Built-In (ArithmeticException, ArrayIndexOutOfBoundException, ClassNotFoundException, IOException, InterruptedException, NoSuchFieldException, NoSuchMethodException, NumberFormatException, RuntimeException, StringIndexOutOfBoundsException)
		2. User Defined
	
	* try-catch block,
		try - Specify block where code is written. we can use nested try.
		catch - Block of code executes when there is exception in try block. We can use multi catch blocks for single try block.
		finally - Block of code executes even or not there is a exception.
			* it is mandatory to use either 'try-catch' or 'try-finally'. try cannot be used alone.
			* finally block of statement should be the last in order. Order to be followed is 'try -> catch -> finally'
		throw - Keyword used to throw an exception.
		throws - Keyword used to declare exceptions, this specifies that there may be certain exception in method. Used in method signature.

	* throw vs throws
		- throw Used to explicitly throw an Exception, throws is to declare an exception
		- Checked exceptions cannot be propagated using throw, Checked exceptions can be propagated using throws.
		- throw used within a method, throws used in method signature
		- Using throw we cannot throw multiple exceptions, using throws we can declare multiple exceptions.


MultiThreading:
    Parallel execution of code instead of sequential execution.
    To achieve multithreading,
        1. The class should extends 'Thread' class and override run() method with our logic.
        2. Call start() method of Thread class.
        3. start() will create a new thread internally and executes overridden run() method logic.
    * Implementing Runnable class is more preferred than Extending Thread class.

    * join() method from Thread class ensures that it will not allow other thread execution till the thread that invoked it gets dead (execution completed).
    * currentThread() method can be used to get/set details of that particular thread.
        Example: Thread.currentThread().getName();
    * setPriority() provides priority of the thread.
        MIN_PRIORITY - 1, NORM_PRIORITY - 5 (default value), MAX_PRIORITY - 10
        Note: It is not mandatory that the max priority executes first, it depends on JVM thread scheduler but most cases it works.
    * yield() method will stop the currently executing thread and will give a chance to other waiting threads of same priority.
    * interrupt() method interrupts the execution of that thread by showing InterruptedException only if the thread is in sleep or waiting mode.

    Thread Synchronization:
        * Enable synchronization why stating 'synchronized' keyword for the method.
        * Can also applied to block and static methods.
        * Once any thread (t1) accessed synchronized nonstatic method of the object,
            Lock is performed on object level not on method level.
            Other Threads
                Cannot Access, because t1 locks the object.
                    synchronized nonstatic methods
                Can Access
                    non-synchronized nonstatic methods
        * Once any thread (t1) accessed synchronized static method of the object,
            This is called as Class Level lock. Lock is performed on object level not on method level.
            Other Threads
                Cannot Access, because t1 locks the object.
                    synchronized static methods
                Can Access
                    non-synchronized static methods
                    synchronized nonstatic methods
                    non-synchronized nonstatic methods
        * Ideally methods which performs
            Add, Edit, Delete we mark them as Synchronized
            Read we mark as Non-Synchronized

    Synchronized Blocks: Implemented for only few lines of code, but not the entire method.
        * This improves the performance of the application. Because all the other threads can execute methods prior to the synchronized block.

        Types of Synchronized Blocks
            * Current Class Object Block
                synchronized(this){ }   this - reference to the current object
            * Object Block
                synchronized(object){ }
            * Class level lock - Locking synchronized static methods
                synchronized(ClassName.class){ }

    InterThread Communication
        wait(), notify(), notifyAll()

    ThreadGroup
        * Each thread has its own parent thread group.
        * By default, 'main' is the current thread group. And parent thread group of main is 'system' thread group.
        * We can create new thread groups and also can assign parent for that,
            New ThreadGroup:
                ThreadGroup ptg = new ThreadGroup("Parent ThreadGroup");
            New ThreadGroup and assign parent thread group:
                ThreadGroup ctg = new ThreadGroup(ptg, "Child ThreadGroup");
        * We can create thread for a thread group,
            Thread t1 = new Thread(ctg, "Thread1");
        * We can assign priority of thread group,
            ctg.setMaxPriority(value);      value >1 and <=10, default is 5.
        * The priority of thread is same as thread group while creation. Cannot be changed later.
        * activeCount() method can find the active threads i.e. threads not in sleep/dead.
        * list() method gives data of the active threads of thread group.

    Daemon Thread
        * Thread that runs in the background and does not prevent the JVM from exiting when all non-daemon threads in java have been completed.
        * Main thread cannot be a daemon thread.
        * If parent thread is a non-daemon, the child is also a non-daemon thread until assigned.
        * If parent thread is a daemon, the child is also a daemon thread.

    Deadlock
